<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mialab.jiandu.mapper.OauthTokenMapper" >
  <resultMap id="BaseResultMap" type="com.mialab.jiandu.model.OauthToken" >
    <id column="phone" property="phone" jdbcType="CHAR" />
    <result column="access_token" property="accessToken" jdbcType="VARCHAR" />
    <result column="access_token_expires" property="accessTokenExpires" jdbcType="TIMESTAMP" />
    <result column="refresh_token" property="refreshToken" jdbcType="VARCHAR" />
    <result column="refresh_token_expires" property="refreshTokenExpires" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    phone, access_token, access_token_expires, refresh_token, refresh_token_expires
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mialab.jiandu.model.OauthTokenExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from oauth_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from oauth_token
    where phone = #{phone,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from oauth_token
    where phone = #{phone,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.mialab.jiandu.model.OauthTokenExample" >
    delete from oauth_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mialab.jiandu.model.OauthToken" >
    insert into oauth_token (phone, access_token, access_token_expires, 
      refresh_token, refresh_token_expires)
    values (#{phone,jdbcType=CHAR}, #{accessToken,jdbcType=VARCHAR}, #{accessTokenExpires,jdbcType=TIMESTAMP}, 
      #{refreshToken,jdbcType=VARCHAR}, #{refreshTokenExpires,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.mialab.jiandu.model.OauthToken" >
    insert into oauth_token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="phone != null" >
        phone,
      </if>
      <if test="accessToken != null" >
        access_token,
      </if>
      <if test="accessTokenExpires != null" >
        access_token_expires,
      </if>
      <if test="refreshToken != null" >
        refresh_token,
      </if>
      <if test="refreshTokenExpires != null" >
        refresh_token_expires,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="phone != null" >
        #{phone,jdbcType=CHAR},
      </if>
      <if test="accessToken != null" >
        #{accessToken,jdbcType=VARCHAR},
      </if>
      <if test="accessTokenExpires != null" >
        #{accessTokenExpires,jdbcType=TIMESTAMP},
      </if>
      <if test="refreshToken != null" >
        #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="refreshTokenExpires != null" >
        #{refreshTokenExpires,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mialab.jiandu.model.OauthTokenExample" resultType="java.lang.Integer" >
    select count(*) from oauth_token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update oauth_token
    <set >
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=CHAR},
      </if>
      <if test="record.accessToken != null" >
        access_token = #{record.accessToken,jdbcType=VARCHAR},
      </if>
      <if test="record.accessTokenExpires != null" >
        access_token_expires = #{record.accessTokenExpires,jdbcType=TIMESTAMP},
      </if>
      <if test="record.refreshToken != null" >
        refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="record.refreshTokenExpires != null" >
        refresh_token_expires = #{record.refreshTokenExpires,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update oauth_token
    set phone = #{record.phone,jdbcType=CHAR},
      access_token = #{record.accessToken,jdbcType=VARCHAR},
      access_token_expires = #{record.accessTokenExpires,jdbcType=TIMESTAMP},
      refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      refresh_token_expires = #{record.refreshTokenExpires,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mialab.jiandu.model.OauthToken" >
    update oauth_token
    <set >
      <if test="accessToken != null" >
        access_token = #{accessToken,jdbcType=VARCHAR},
      </if>
      <if test="accessTokenExpires != null" >
        access_token_expires = #{accessTokenExpires,jdbcType=TIMESTAMP},
      </if>
      <if test="refreshToken != null" >
        refresh_token = #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="refreshTokenExpires != null" >
        refresh_token_expires = #{refreshTokenExpires,jdbcType=TIMESTAMP},
      </if>
    </set>
    where phone = #{phone,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mialab.jiandu.model.OauthToken" >
    update oauth_token
    set access_token = #{accessToken,jdbcType=VARCHAR},
      access_token_expires = #{accessTokenExpires,jdbcType=TIMESTAMP},
      refresh_token = #{refreshToken,jdbcType=VARCHAR},
      refresh_token_expires = #{refreshTokenExpires,jdbcType=TIMESTAMP}
    where phone = #{phone,jdbcType=CHAR}
  </update>
</mapper>